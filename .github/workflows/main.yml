name: CI Pipeline

on:
  push:
    branches:
      - master       # Produção
      - staging      # Estágio
      - develop      # Desenvolvimento
  pull_request:
    branches:
      - master
      - staging
      - develop

jobs:
  montagem:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'

      - name: Montar o projeto
        run: |
          echo "Executando montagem do projeto"
          go build ./...

  bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # ajuste conforme necessário

      - name: Install Bandit
        run: |
          pip install bandit

      - name: Run Bandit
        run: |
          echo "Executando análise estática com Bandit"
          bandit -r ./todo_project  # ajuste o caminho conforme necessário

  dependency-analysis:
    runs-on: ubuntu-24.04
    needs: montagem
    steps:
      - uses: actions/checkout@v4

      - name: Install OWASP Dependency Check
        run: |
          wget https://github.com/jeremy-long/DependencyCheck/releases/download/v7.5.0/dependency-check-7.5.0-release.zip
          unzip dependency-check-7.5.0-release.zip
          sudo mv dependency-check /usr/local/bin/
          sudo chmod +x /usr/local/bin/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency Check
        run: |
          /usr/local/bin/dependency-check/bin/dependency-check.sh --project "Task-Manager-using-Flask" -o ./dependency-check-report --scan . --exclude "**/*.dll" --exclude "**/*.exe"

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report

  test:
    runs-on: ubuntu-latest
    needs: [montagem, bandit, dependency-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment variables
        run: |
          echo "Definindo variáveis de ambiente"
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV  # Armazene a chave como um segredo no GitHub

      - name: Run Tests
        run: |
          echo "Executando testes automatizados"
          mkdir -p coverage 
          go test -v -coverprofile=coverage.out -covermode=set ./...
          pwd 
          ls -la coverage 
          cat coverage.out

      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out