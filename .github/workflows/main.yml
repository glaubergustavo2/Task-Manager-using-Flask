name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build -t ex-build-dev:latest .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'

      - name: Run Tests
        run: |
          echo "Testing the app"
          mkdir -p coverage 
          go test -v -coverprofile=coverage.out -covermode=set ./... 
          pwd 
          ls -la coverage 
          cat coverage.out

      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.out

  code_analysis:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Code Analysis
        uses: sonarsource/sonar-scanner-cli@v1
        with:
          args: |
            -D sonar.go.coverage.reportPaths=coverage.out

  security_scan:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Security Scan
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ex-build-dev:latest

  dependency_check:
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Dependency Check
        run: |
          echo "Verificando dependÃªncias"
          Dependency-Check Core --project "my-golang-app" --scan . --format "HTML" --out dependency-check-report.html
          cat dependency-check-report.html

  deploy:
    runs-on: ubuntu-latest
    needs: dependency_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Docker
        run: |
          echo "Removendo containers anteriores"
          PORT_CONTAINERS=$(docker ps --filter "publish=8081" -q)
          if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS
            docker rm $PORT_CONTAINERS
            sleep 5
          fi
          echo "Deploying the app"
          docker run -d -p 8081:8080 ex-build-dev:latest