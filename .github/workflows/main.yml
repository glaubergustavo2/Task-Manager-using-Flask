variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0    

stages:
  - build
  - test1
  - test2
  - test3
  - test4
  - deploy
  - notify

build_job:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t ex-build-dev:latest .

test_job:
  stage: test1
  image: golang:1.19
  script:
    - echo "Testing the app"
    - mkdir -p coverage 
    - go test -v -coverprofile=coverage.out -covermode=set ./... 
    - pwd 
    - ls -la coverage 
    - cat coverage.out
  artifacts:
    paths:
      - coverage.out
    expire_in: 1 week

code_analysis:
  stage: test2
  image: sonarsource/sonar-scanner-cli:latest
  dependencies:
    - test_job
  script:
    - echo "Verificando artefatos do test_job"
    - pwd 
    - ls -la 
    - if [ -f coverage.out ]; then cat coverage.out; else echo "coverage.out não encontrado"; fi
    - sonar-scanner -D sonar.go.coverage.reportPaths=coverage.out

security_scan:
  stage: test3
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL ex-build-dev:latest
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /root/.cache/trivy
  only:
    - master

dependency_check:
  stage: test4
  image: owasp/dependency-check
  script:
    - echo "Verificando dependências"
    - pwd 
    - ls -la 
    - Dependency-Check Core --project "my-golang-app" --scan . --format "HTML" --out dependency-check-report.html
    - cat dependency-check-report.html
    - sonar-scanner -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

deploy_job:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:        
    - echo "Removendo containers anteriores"
    - PORT_CONTAINERS=$(docker ps --filter "publish=8081" -q)
    - echo $PORT_CONTAINERS
    - if [ -n "$PORT_CONTAINERS" ]; then
        docker stop $PORT_CONTAINERS;
        docker rm $PORT_CONTAINERS;
        sleep 5; 
      fi
  script:
    - echo "Deploying the app"
    - docker run -d -p 8081:8080 ex-build-dev:latest
